import java.text.SimpleDateFormat

buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.0'
    classpath "org.jfrog.buildinfo:build-info-extractor-gradle:3.0.1"
  }
}

// Apply the groovy plugin to add support for Groovy
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: "jacoco"
apply plugin: "maven"
apply plugin: "maven-publish"
apply plugin: 'com.jfrog.bintray'
apply plugin: "com.jfrog.artifactory"

// In this section you declare where to find the dependencies of your project
repositories {
  // Use 'maven central' for resolving your dependencies.
  // You can declare any Maven/Ivy/file repository here.
  jcenter()
  mavenCentral()
}

configurations {
  published
  provided
  compile.extendsFrom provided
}

conf2ScopeMappings.addMapping(0, configurations.provided, Conf2ScopeMappingContainer.PROVIDED)

// In this section you declare the dependencies for your production and test code
dependencies {
  // We use the latest groovy 2.x version for building this library
  provided 'org.codehaus.groovy:groovy:2.1.5'
  provided "io.vertx:vertx-core:2.1.2"
  provided "io.vertx:vertx-platform:2.1.2"
  provided "io.vertx:lang-groovy:2.1.0-final@jar"
  // We use the awesome Spock testing and specification framework
  testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
  testCompile 'junit:junit:4.11'
}

jar {
  metaInf {
    from("src/main/jar") {
      include "**/*.*"
    }
  }
}

task sourceJar(type: Jar) {
  from sourceSets.main.allSource
  classifier = 'sources'
}
task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

publishing {
  publications {
    published(MavenPublication) {
      from components.java
      artifact sourceJar
      artifact javadocJar
    }
  }
}
// Add the sourceJars to non-extractor modules
artifacts {
  published sourceJar
  published javadocJar
}

def globalVersion = new Version(currentVersion)

group = 'com.github.bangroot.vertx'
version = globalVersion
status = version.status

bintray {
  apiUrl = "https://api.bintray.com"
  user = bintray_user
  key = bintray_key
  configurations = ['published', 'archives']
//  publications = ['published']
//  filesSpec {
//    from 'files'
//    into 'standalone_files/level1'
//    rename '(.+)\\.(.+)', '$1-suffix.$2'
//  }
  publish = false
  pkg {
    repo = 'maven'
    name = project.name
    desc = 'Utility Classes for Vert.x Development'
    websiteUrl = 'https://github.com/bangroot/vertx-utils'
    issueTrackerUrl = 'https://github.com/bangroot/vertx-utils/issues'
    vcsUrl = 'https://github.com/bangroot/vertx-utils.git'
    licenses = ['Apache-2.0']
    labels = ['vertx', 'groovy']
    attributes = ['plat': ['linux', 'osx']]
    publicDownloadNumbers = true
    version {
      name = '1.0' //Optional logical version name
//      desc = 'optional, version-specific description'
      vcsTag = '1.0'
//      attributes= ['a': ['ay1', 'ay2', 'ay3'], 'b': ['bee'], c: 'cee']
    }
  }
}

artifactory {
  contextUrl = "https://oss.jfrog.org"
  publish {
    repository {
      repoKey = 'oss-snapshot-local'
      username = bintray_user
      password = bintray_key
    }
  }
}

artifactoryPublish {
  publications('published')
}

class Version {
  String originalVersion
  String thisVersion
  String status
  Date buildTime

  Version(String versionValue) {
    buildTime = new Date()
    originalVersion = versionValue
    if (originalVersion.endsWith('-SNAPSHOT')) {
      status = 'integration'
      thisVersion = originalVersion.substring(0, originalVersion.length() - 'SNAPSHOT'.length()) + getTimestamp()
    } else {
      status = 'release'
      thisVersion = versionValue
    }
  }

  String getTimestamp() {
    // Convert local file timestamp to UTC
    def format = new SimpleDateFormat('yyyyMMddHHmmss')
    format.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')));
    return format.format(buildTime)
  }

  String toString() {
    thisVersion
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.2.1'
}

task mappings << {
  conf2ScopeMappings.mappings.each { key, value ->
    println "$key: $value.scope"
  }
}